// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	"github.com/cidverse/normalizeci/pkg/ncispec"
	"github.com/stretchr/testify/mock"
)

// Normalizer is an autogenerated mock type for the Normalizer type
type Normalizer struct {
	mock.Mock
}

// Check provides a mock function with given fields: env
func (_m *Normalizer) Check(env map[string]string) bool {
	ret := _m.Called(env)

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]string) bool); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Denormalize provides a mock function with given fields: spec
func (_m *Normalizer) Denormalize(spec ncispec.NormalizeCISpec) map[string]string {
	ret := _m.Called(spec)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(ncispec.NormalizeCISpec) map[string]string); ok {
		r0 = rf(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Normalizer) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSlug provides a mock function with given fields:
func (_m *Normalizer) GetSlug() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Normalize provides a mock function with given fields: env
func (_m *Normalizer) Normalize(env map[string]string) ncispec.NormalizeCISpec {
	ret := _m.Called(env)

	var r0 ncispec.NormalizeCISpec
	if rf, ok := ret.Get(0).(func(map[string]string) ncispec.NormalizeCISpec); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Get(0).(ncispec.NormalizeCISpec)
	}

	return r0
}

type mockConstructorTestingTNewNormalizer interface {
	mock.TestingT
	Cleanup(func())
}

// NewNormalizer creates a new instance of Normalizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNormalizer(t mockConstructorTestingTNewNormalizer) *Normalizer {
	mock := &Normalizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
